object listSession {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  //1.
  def isOdd(x: Int) = x%2 != 0                    //> isOdd: (x: Int)Boolean
  def cube(x: Int) = x * x * x                    //> cube: (x: Int)Int
  //iterative
  def sumOddCubes(list: List[Int]) = {
  var result = 0
  for(x <- list){ if(isOdd(x))result += cube(x) }
  result
  }                                               //> sumOddCubes: (list: List[Int])Int
  
  sumOddCubes(List(2,0, 3, 4, 5))                 //> res0: Int = 152
  sumOddCubes(List(1,3))                          //> res1: Int = 28
  
 	//recursive
 	def sumOddCubes2(nums: List[Int]): Int = {
 	if(nums == Nil) 0 else {
 	val butFirst = sumOddCubes2(nums.tail)
 	if(isOdd(nums.head)) cube(nums.head) + butFirst else butFirst
 	}
 	}                                         //> sumOddCubes2: (nums: List[Int])Int
 	sumOddCubes2(List(2,0, 3, 4, 5))          //> res2: Int = 152
  sumOddCubes2(List(1,3))                         //> res3: Int = 28
 	//tailrecursive
 	def sumOddCubes3(nums: List[Int]) = {
 	def helper(result: Int, unseen: List[Int]): Int = {
 	if(unseen == Nil) result
 	else{
 	val newResult = if(isOdd(unseen.head)) result + cube(unseen.head) else result
 	helper(newResult, unseen.tail)
 	}
 	}
 	helper(0, nums)
 	}                                         //> sumOddCubes3: (nums: List[Int])Int
 	sumOddCubes3(List(2,0, 3, 4, 5))          //> res4: Int = 152
  sumOddCubes3(List(1,3))                         //> res5: Int = 28
 	//mapfilterreduce
 	def sumOddCubes4(nums: List[Int]) = nums.filter(isOdd).map(cube).reduce(_ + _)
                                                  //> sumOddCubes4: (nums: List[Int])Int
  sumOddCubes4(List(2,0, 3, 4, 5))                //> res6: Int = 152
  sumOddCubes4(List(1,3))                         //> res7: Int = 28
  
//sumOddCubes3(List(1, 3).filter(isOdd))
 	
 	//2.
 	//iterative
 	def sumOfSums(list: List[List[Int]]) = {
 	var result = 0
 	for(x <- list){
 	for(y <- x){
 	result +=  y
 	}
 	}
 	result
 	}                                         //> sumOfSums: (list: List[List[Int]])Int
 	val test = List(List(1,2,3),List(4,5,6),List(7,8,9))
                                                  //> test  : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))
                                                  //| 
 	sumOfSums(test)                           //> res8: Int = 45
 	
  //recursive
  def sumOfSums2(list: List[List[Int]]): Int = {
  if(list == Nil) 0
  else list.head.sum + sumOfSums2(list.tail)
  }                                               //> sumOfSums2: (list: List[List[Int]])Int
  
  sumOfSums2(test)                                //> res9: Int = 45
  
  //tailrecursive
  def sumOfSums3(list: List[List[Int]]) = {
  def helper(result: Int, unseen: List[List[Int]]): Int = {
  if(unseen == Nil) result
  else{
  helper(unseen.head.sum+result,unseen.tail)
  }
  }
 	helper(0, list)
  }                                               //> sumOfSums3: (list: List[List[Int]])Int
  
  sumOfSums3(test)                                //> res10: Int = 45
  //mapfilterreduce
  def sum(list: List[Int]) = list.sum             //> sum: (list: List[Int])Int
  def sumOfSums4(list: List[List[Int]]) = list.map(sum _).reduce(_ + _)
                                                  //> sumOfSums4: (list: List[List[Int]])Int
  sumOfSums4(test)                                //> res11: Int = 45
  
  //3.
  //recursive
  //depth = max(depth(head) +1, depth (tail))
  def depth (list: List[Any]):Int = {
  if(list.asInstanceOf[List[Any]].size == 0) 1
  else if(list.head.isInstanceOf[List[Any]]){
  math.max(depth(list.head.asInstanceOf[List[Any]]) + 1, depth(list.tail))
  } else{depth(list.tail)}
  }                                               //> depth: (list: List[Any])Int
  //tailrecursive
  def isList(thing: Any) = thing.isInstanceOf[List[Any]]
                                                  //> isList: (thing: Any)Boolean
  def depth2(list: List[Any]) = {
  def helper(list2: List[Any], count: Int): Int = {
  if(list2 == Nil) count
  else if (list2.head.isInstanceOf[List[Any]]){
  math.max(helper(list2.head.asInstanceOf[List[Any]],count +1), helper(list2.tail,count))
  } else{helper(list2.tail, count)}
  }
  helper(list,1)
  }                                               //> depth2: (list: List[Any])Int
  
    //should return 4
  depth(List(List(List(1, 2, List(3)))))          //> res12: Int = 4
  depth2(List(List(List(1, 2, List(3)))))         //> res13: Int = 4
  
  //4.
  val numbers = List(0.0,1.0,2.0,3.0,4.0,5.0)     //> numbers  : List[Double] = List(0.0, 1.0, 2.0, 3.0, 4.0, 5.0)
  //iterative
  def average(list: List[Double]) = {
  var result = 0.0
  for(x <- list) result += x
  result/list.length
  }                                               //> average: (list: List[Double])Double
  average(numbers)                                //> res14: Double = 2.5
  //recursive
  def average2(list:List[Double]): Double = {
  if(list == Nil) 0.0 else (list.head + average2(list.tail))/2
  }                                               //> average2: (list: List[Double])Double
  average2(numbers)                               //> res15: Double = 0.890625
  //tail recursive
  //mapfilterreduce
  
  //5.
  //iterative
  def max(list: List[Any]) = {
  var maximum = list.head
  for(i <- list){if( i.asInstanceOf[Comparable[Any]].compareTo(maximum) > 0) maximum = i }
  maximum
  }                                               //> max: (list: List[Any])Any
  max(numbers)                                    //> res16: Any = 5.0
  //recursion
  def max2(list: List[Any]): Any = {
  if(list == Nil) 0
  else if (list.size == 1) list.head
  else{
  if(list.head.asInstanceOf[Comparable[Any]].compareTo(max2(list.tail)) > 0) list.head
  else{ list.tail }
  }
  }                                               //> max2: (list: List[Any])Any
  //y is greater than x
  def max3(list: List[Any]) = {
  var maximum = list.head
  val reducedList = list.reduce(_.asInstanceOf[Comparable[Any]] compareTo _.asInstanceOf[Any])
  print(reducedList)
  }                                               //> max3: (list: List[Any])Unit
  
  max3(numbers)                                   //> java.lang.ClassCastException: java.lang.Double cannot be cast to java.lang.
                                                  //| Integer
                                                  //| 	at java.lang.Integer.compareTo(Unknown Source)
                                                  //| 	at listSession$$anonfun$main$1$$anonfun$1.apply(listSession.scala:147)
                                                  //| 	at listSession$$anonfun$main$1$$anonfun$1.apply(listSession.scala:147)
                                                  //| 	at scala.collection.LinearSeqOptimized$class.foldLeft(LinearSeqOptimized
                                                  //| .scala:124)
                                                  //| 	at scala.collection.immutable.List.foldLeft(List.scala:84)
                                                  //| 	at scala.collection.LinearSeqOptimized$class.reduceLeft(LinearSeqOptimiz
                                                  //| ed.scala:138)
                                                  //| 	at scala.collection.immutable.List.reduceLeft(List.scala:84)
                                                  //| 	at scala.collection.TraversableOnce$class.reduce(TraversableOnce.scala:2
                                                  //| 06)
                                                  //| 	at scala.collection.AbstractTraversable.reduce(Traversable.scala:104)
                                                  //| 	at listSession$$anonfun$main$1.max3$1(listSession.scala:147)
                                                  //| 	at listSession$$anonfun$main$1.apply$mcV$sp(listSession.scala:151)
                                                  //| 	at org.scalaide.worksheet.runtime.library.Worksheet
                                                  //| Output exceeds cutoff limit.
 
  /*
  //6.
  //iterative
  def countPass[T] (list: List[T], pred: T=> Boolean): Int = {
  var count = 0
  for(x <- list){ if (pred(x)) {count += 1 }}
  count
  }
  //mapfilterreduce
  
  def countPass2[T] (list: List[T], pred: T=>Boolean) = list.filter(pred).length
  
    def greaterThan2(num: Int) = {
  if(num > 2) true
  else false
  }
  
  val numbers2 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  countPass(numbers2,greaterThan2)
  countPass2(numbers2,greaterThan2)
  
  //7.
  //iterative
  def allPass[T] (list: List[T], pred: T=> Boolean): Boolean = {
  var result = true
  for(x <- list) {if(!pred(x)) result = false}
  result
  }
  
  //mapreducefilter
  def allPass2[T] (list: List[T], pred: T=> Boolean): Boolean = {
  val list2 = list.filter(pred)
  list2.length == list.length
  }
  
  val numbers3 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  val numbers4 = List( 3, 4,5,6,3)
  allPass(numbers3,greaterThan2)
  allPass2(numbers3,greaterThan2)
    allPass(numbers4,greaterThan2)
  allPass2(numbers4,greaterThan2)
  //8.
  //iterative
  def somethingPass[T] (list: List[T], pred: T=>Boolean): Boolean = {
  var result = false
  for(x <- list) {if(pred(x)) return true}
  result
  }
  //mapreducefilter
  def somethingPass2[T] (list: List[T], pred: T=>Boolean): Boolean = list.filter(pred).length > 0
  
    val numbers5 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  val numbers6 = List( 0,-1,2,1,2)
  somethingPass(numbers5,greaterThan2)
  somethingPass2(numbers5,greaterThan2)
    somethingPass(numbers6,greaterThan2)
  somethingPass2(numbers6,greaterThan2)
  
  
  //part 2
  def spellCheck(doc: List[String], dictionary: List[String]): List[String] = {
  val badWords = spellCheck(doc.tail, dictionary)
  if(dictionary.contains(doc.head)) badWords else doc.head::badWords
  }
  */
}