object listSession {
  println("Welcome to the Scala worksheet")
  
  //1.
  def isOdd(x: Int) = x%2 != 0
  def cube(x: Int) = x * x * x
  //iterative
  def sumOddCubes(list: List[Int]) = {
  var result = 0
  for(x <- list){ if(isOdd(x))result += cube(x) }
  result
  }
  
  sumOddCubes(List(2,0, 3, 4, 5))
  sumOddCubes(List(1,3))
  
 	//recursive
 	def sumOddCubes2(nums: List[Int]): Int = {
 	if(nums == Nil) 0 else {
 	val butFirst = sumOddCubes2(nums.tail)
 	if(isOdd(nums.head)) cube(nums.head) + butFirst else butFirst
 	}
 	}
 	sumOddCubes2(List(2,0, 3, 4, 5))
  sumOddCubes2(List(1,3))
 	//tailrecursive
 	def sumOddCubes3(nums: List[Int]) = {
 	def helper(result: Int, unseen: List[Int]): Int = {
 	if(unseen == Nil) result
 	else{
 	val newResult = if(isOdd(unseen.head)) result + cube(unseen.head) else result
 	helper(newResult, unseen.tail)
 	}
 	}
 	helper(0, nums)
 	}
 	sumOddCubes3(List(2,0, 3, 4, 5))
  sumOddCubes3(List(1,3))
 	//mapfilterreduce
 	def sumOddCubes4(nums: List[Int]) = nums.filter(isOdd).map(cube).reduce(_ + _)
  sumOddCubes4(List(2,0, 3, 4, 5))
  sumOddCubes4(List(1,3))
  
//sumOddCubes3(List(1, 3).filter(isOdd))
 	
 	//2.
 	//iterative
 	def sumOfSums(list: List[List[Int]]) = {
 	var result = 0
 	for(x <- list){
 	for(y <- x){
 	result +=  y
 	}
 	}
 	result
 	}
 	val test = List(List(1,2,3),List(4,5,6),List(7,8,9))
 	sumOfSums(test)
 	
  //recursive
  def sumOfSums2(list: List[List[Int]]): Int = {
  if(list == Nil) 0
  else list.head.sum + sumOfSums2(list.tail)
  }
  
  sumOfSums2(test)
  
  //tailrecursive
  def sumOfSums3(list: List[List[Int]]) = {
  def helper(result: Int, unseen: List[List[Int]]): Int = {
  if(unseen == Nil) result
  else{
  helper(unseen.head.sum+result,unseen.tail)
  }
  }
 	helper(0, list)
  }
  
  sumOfSums3(test)
  //mapfilterreduce
  def sum(list: List[Int]) = list.sum
  def sumOfSums4(list: List[List[Int]]) = list.map(sum _).reduce(_ + _)
  sumOfSums4(test)
  
  //3.
  def depth[T] (list: Array[T]) = {
  
  }
  
  //4.
  val numbers = List(0.0,1.0,2.0,3.0,4.0,5.0)
  //iterative
  def average(list: List[Double]) = {
  var result = 0.0
  for(x <- list) result += x
  result/list.length
  }
  average(numbers)
  //recursive
  def average2(list:List[Double]): Double = {
  if(list == Nil) 0.0 else (list.head + average2(list.tail))/2
  }
  average2(numbers)
  //tail recursive
  //mapfilterreduce
  
  //5.
  //iterative
  def max (list: List[Any]) = {
  var maximum = list.head
  for(i <- 0 to list.length){
  if(list(i) > maximum) maximum = list(i)
  
  }
  maximum
  }
  
  max(numbers)
  
  
  //6.
  def countPass[T] (list: List[T], pred: T=> Boolean): Int = {
  var count = 0
  for(x <- list){ if (pred(T)) {count += 1 }}
  count
  }
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  //part 2
  def spellCheck(doc: List[String], dictionary: List[String]): List[String] = {
  val badWords = spellCheck(doc.tail, dictionary)
  if(dictionary.contains(doc.head)) badWords else doc.head::badWords
  }
  
}