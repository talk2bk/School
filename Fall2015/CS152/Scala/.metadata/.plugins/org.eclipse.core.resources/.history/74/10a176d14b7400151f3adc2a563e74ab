object listSession {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  //1.
  def isOdd(x: Int) = x%2 != 0                    //> isOdd: (x: Int)Boolean
  def cube(x: Int) = x * x * x                    //> cube: (x: Int)Int
  //iterative
  def sumOddCubes(list: List[Int]) = {
  var result = 0
  for(x <- list){ if(isOdd(x))result += cube(x) }
  result
  }                                               //> sumOddCubes: (list: List[Int])Int
  
  sumOddCubes(List(2,0, 3, 4, 5))                 //> res0: Int = 152
  sumOddCubes(List(1,3))                          //> res1: Int = 28
  
 	//recursive
 	def sumOddCubes2(nums: List[Int]): Int = {
 	if(nums == Nil) 0 else {
 	val butFirst = sumOddCubes2(nums.tail)
 	if(isOdd(nums.head)) cube(nums.head) + butFirst else butFirst
 	}
 	}                                         //> sumOddCubes2: (nums: List[Int])Int
 	sumOddCubes2(List(2,0, 3, 4, 5))          //> res2: Int = 152
  sumOddCubes2(List(1,3))                         //> res3: Int = 28
 	//tailrecursive
 	def sumOddCubes3(nums: List[Int]) = {
 	def helper(result: Int, unseen: List[Int]): Int = {
 	if(unseen == Nil) result
 	else{
 	val newResult = if(isOdd(unseen.head)) result + cube(unseen.head) else result
 	helper(newResult, unseen.tail)
 	}
 	}
 	helper(0, nums)
 	}                                         //> sumOddCubes3: (nums: List[Int])Int
 	sumOddCubes3(List(2,0, 3, 4, 5))          //> res4: Int = 152
  sumOddCubes3(List(1,3))                         //> res5: Int = 28
 	//mapfilterreduce
 	def sumOddCubes4(nums: List[Int]) = nums.filter(isOdd).map(cube).reduce(_ + _)
                                                  //> sumOddCubes4: (nums: List[Int])Int
  sumOddCubes4(List(2,0, 3, 4, 5))                //> res6: Int = 152
  sumOddCubes4(List(1,3))                         //> res7: Int = 28
  
//sumOddCubes3(List(1, 3).filter(isOdd))
 	
 	//2.
 	//iterative
 	def sumOfSums(list: List[List[Int]]) = {
 	var result = 0
 	for(x <- list){
 	for(y <- x){
 	result +=  y
 	}
 	}
 	result
 	}                                         //> sumOfSums: (list: List[List[Int]])Int
 	val test = List(List(1,2,3),List(4,5,6),List(7,8,9))
                                                  //> test  : List[List[Int]] = List(List(1, 2, 3), List(4, 5, 6), List(7, 8, 9))
                                                  //| 
 	sumOfSums(test)                           //> res8: Int = 45
 	
  //recursive
  def sumOfSums2(list: List[List[Int]]): Int = {
  if(list == Nil) 0
  else list.head.sum + sumOfSums2(list.tail)
  }                                               //> sumOfSums2: (list: List[List[Int]])Int
  
  sumOfSums2(test)                                //> res9: Int = 45
  
  //tailrecursive
  def sumOfSums3(list: List[List[Int]]) = {
  def helper(result: Int, unseen: List[List[Int]]): Int = {
  if(unseen == Nil) result
  else{
  helper(unseen.head.sum+result,unseen.tail)
  }
  }
 	helper(0, list)
  }                                               //> sumOfSums3: (list: List[List[Int]])Int
  
  sumOfSums3(test)                                //> res10: Int = 45
  //mapfilterreduce
  def sum(list: List[Int]) = list.sum             //> sum: (list: List[Int])Int
  def sumOfSums4(list: List[List[Int]]) = list.map(sum _).reduce(_ + _)
                                                  //> sumOfSums4: (list: List[List[Int]])Int
  sumOfSums4(test)                                //> res11: Int = 45
  
  //3.
  def depth[T] (list: Array[T]) = {
  
  }                                               //> depth: [T](list: Array[T])Unit
  
  //4.
  val numbers = List(0.0,1.0,2.0,3.0,4.0,5.0)     //> numbers  : List[Double] = List(0.0, 1.0, 2.0, 3.0, 4.0, 5.0)
  //iterative
  def average(list: List[Double]) = {
  var result = 0.0
  for(x <- list) result += x
  result/list.length
  }                                               //> average: (list: List[Double])Double
  average(numbers)                                //> res12: Double = 2.5
  //recursive
  def average2(list:List[Double]): Double = {
  if(list == Nil) 0.0 else (((list.head + list.tail.head)/2) + average(list.tail.tail))/2
  }                                               //> average2: (list: List[Double])Double
  average2(numbers)                               //> res13: Double = 2.0
  //tail recursive
  //mapfilterreduce
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  //part 2
  def spellCheck(doc: List[String], dictionary: List[String]): List[String] = {
  val badWords = spellCheck(doc.tail, dictionary)
  if(dictionary.contains(doc.head)) badWords else doc.head::badWords
  }                                               //> spellCheck: (doc: List[String], dictionary: List[String])List[String]
  
}