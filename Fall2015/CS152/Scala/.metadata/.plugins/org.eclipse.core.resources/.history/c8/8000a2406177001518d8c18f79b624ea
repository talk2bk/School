object midtermSession {
  println("Welcome to the Scala worksheet")
 //2.
 def approxZero(num: Any): Boolean = num.asInstanceOf[Comparable[Any]].compareTo(0.1) < 0 && num.asInstanceOf[Comparable[Any]].compareTo(-0.1) > 0
 def self(num: Double): Double = num
 
def countRoots[T](f: T => Double, inputs: List[T]) = inputs.map(f).filter(approxZero _).length
val numbers = List(0.01, 0.1, 1, 0.001, -0.001, -1)
val numbers2 = List(0.001, 0.00001, 0.0001, 0.01)
val numbers3 = List(1.0,2,3,4,5)
countRoots(self, numbers)
countRoots(self, numbers2)
countRoots(self, numbers3)

//3.
def fact(n: Int): Int = if(n ==0) 1 else n*fact(n-1)

//def recur(base: Int, combiner: (Int, Int) => Int): Int => Int = {}

//4.
def some(vals: List[Int], test: Int => Boolean): Boolean = {
def helper(vals2: List[Int], test2: Int =>Boolean, pass: Boolean): Boolean = {
if(pass) true else helper(vals2.tail, test2, test2(vals2.head))
}
helper(vals,test,false)
}

some(List(1, 3, 5, 7), (n: Int)=> n % 2 == 0) // = false
some(List(1, 3, 5, 8), (n: Int)=> n % 2 == 0) // = true



}