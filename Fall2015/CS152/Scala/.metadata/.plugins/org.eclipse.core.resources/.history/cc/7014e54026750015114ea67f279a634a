object listSession {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  /*
  //1.
  def isOdd(x: Int) = x%2 != 0
  def cube(x: Int) = x * x * x
  //iterative
  def sumOddCubes(list: List[Int]) = {
  var result = 0
  for(x <- list){ if(isOdd(x))result += cube(x) }
  result
  }
  
  sumOddCubes(List(2,0, 3, 4, 5))
  sumOddCubes(List(1,3))
  
 	//recursive
 	def sumOddCubes2(nums: List[Int]): Int = {
 	if(nums == Nil) 0 else {
 	val butFirst = sumOddCubes2(nums.tail)
 	if(isOdd(nums.head)) cube(nums.head) + butFirst else butFirst
 	}
 	}
 	sumOddCubes2(List(2,0, 3, 4, 5))
  sumOddCubes2(List(1,3))
 	//tailrecursive
 	def sumOddCubes3(nums: List[Int]) = {
 	def helper(result: Int, unseen: List[Int]): Int = {
 	if(unseen == Nil) result
 	else{
 	val newResult = if(isOdd(unseen.head)) result + cube(unseen.head) else result
 	helper(newResult, unseen.tail)
 	}
 	}
 	helper(0, nums)
 	}
 	sumOddCubes3(List(2,0, 3, 4, 5))
  sumOddCubes3(List(1,3))
 	//mapfilterreduce
 	def sumOddCubes4(nums: List[Int]) = nums.filter(isOdd).map(cube).reduce(_ + _)
  sumOddCubes4(List(2,0, 3, 4, 5))
  sumOddCubes4(List(1,3))
  
//sumOddCubes3(List(1, 3).filter(isOdd))
 	
 	//2.
 	//iterative
 	def sumOfSums(list: List[List[Int]]) = {
 	var result = 0
 	for(x <- list){
 	for(y <- x){
 	result +=  y
 	}
 	}
 	result
 	}
 	val test = List(List(1,2,3),List(4,5,6),List(7,8,9))
 	sumOfSums(test)
 	
  //recursive
  def sumOfSums2(list: List[List[Int]]): Int = {
  if(list == Nil) 0
  else list.head.sum + sumOfSums2(list.tail)
  }
  
  sumOfSums2(test)
  
  //tailrecursive
  def sumOfSums3(list: List[List[Int]]) = {
  def helper(result: Int, unseen: List[List[Int]]): Int = {
  if(unseen == Nil) result
  else{
  helper(unseen.head.sum+result,unseen.tail)
  }
  }
 	helper(0, list)
  }
  
  sumOfSums3(test)
  //mapfilterreduce
  def sum(list: List[Int]) = list.sum
  def sumOfSums4(list: List[List[Int]]) = list.map(sum _).reduce(_ + _)
  sumOfSums4(test)
  
  //3.
  //recursive
  //depth = max(depth(head) +1, depth (tail))
  def depth (list: List[Any]):Int = {
  if(list.asInstanceOf[List[Any]].size == 0) 1
  else if(list.head.isInstanceOf[List[Any]]){
  math.max(depth(list.head.asInstanceOf[List[Any]]) + 1, depth(list.tail))
  } else{depth(list.tail)}
  }
  //tailrecursive
  def isList(thing: Any) = thing.isInstanceOf[List[Any]]
  def depth2(list: List[Any]) = {
  def helper(list2: List[Any], count: Int): Int = {
  if(list2 == Nil) count
  else if (list2.head.isInstanceOf[List[Any]]){
  math.max(helper(list2.head.asInstanceOf[List[Any]],count +1), helper(list2.tail,count))
  } else{helper(list2.tail, count)}
  }
  helper(list,1)
  }
  
    //should return 4
  depth(List(List(List(1, 2, List(3)))))
  depth2(List(List(List(1, 2, List(3)))))
  
  //4.
  val numbers = List(0.0,1.0,2.0,3.0,4.0,5.0)
  //iterative
  def average(list: List[Double]) = {
  var result = 0.0
  for(x <- list) result += x
  result/list.length
  }
  //mapfilterreduce
  def average2(list: List[Double]) = {
  list.reduce(_ + _)/list.length
  }
   average(numbers)
   average2(numbers)
   
  //5.
  //iterative
  def max(list: List[Any]) = {
  var maximum = list.head
  for(i <- list){if( i.asInstanceOf[Comparable[Any]].compareTo(maximum) > 0) maximum = i }
  maximum
  }
  max(numbers)
  //tailrecursion
  def max2(list: List[Any]) = {
  if(list == Nil) 0
  def helper(maximum: Any, list2: List[Any]): Any = {
  if(list2 == Nil) maximum else{
  if(maximum.asInstanceOf[Comparable[Any]].compareTo(list2.head) > 0) helper(maximum, list2.tail)
  else helper(list2.head,list2.tail)
  }
  }
  helper(list(0), list.tail)
  }
  
  max2(numbers)
 
 
  //6.
  //iterative
  def countPass[T] (list: List[T], pred: T=> Boolean): Int = {
  var count = 0
  for(x <- list){ if (pred(x)) {count += 1 }}
  count
  }
  //mapfilterreduce
  
  def countPass2[T] (list: List[T], pred: T=>Boolean) = list.filter(pred).length
  
    def greaterThan2(num: Int) = {
  if(num > 2) true
  else false
  }
  
  val numbers2 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  countPass(numbers2,greaterThan2)
  countPass2(numbers2,greaterThan2)
  
  //7.
  //iterative
  def allPass[T] (list: List[T], pred: T=> Boolean): Boolean = {
  var result = true
  for(x <- list) {if(!pred(x)) result = false}
  result
  }
  
  //mapreducefilter
  def allPass2[T] (list: List[T], pred: T=> Boolean): Boolean = {
  val list2 = list.filter(pred)
  list2.length == list.length
  }
  
  val numbers3 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  val numbers4 = List( 3, 4,5,6,3)
  allPass(numbers3,greaterThan2)
  allPass2(numbers3,greaterThan2)
    allPass(numbers4,greaterThan2)
  allPass2(numbers4,greaterThan2)
  //8.
  //iterative
  def somethingPass[T] (list: List[T], pred: T=>Boolean): Boolean = {
  var result = false
  for(x <- list) {if(pred(x)) return true}
  result
  }
  //mapreducefilter
  def somethingPass2[T] (list: List[T], pred: T=>Boolean): Boolean = list.filter(pred).length > 0
  
    val numbers5 = List(0,-1,2, 1, 2, 3, 4,5,6,3)
  val numbers6 = List( 0,-1,2,1,2)
  somethingPass(numbers5,greaterThan2)
  somethingPass2(numbers5,greaterThan2)
    somethingPass(numbers6,greaterThan2)
  somethingPass2(numbers6,greaterThan2)
  */
  
  //part 2
  var cs152 = List(List(93.0, 89.0, 90.0), List(75.0, 76.0, 68.0), List(88.0, 82.0, 78.0))
                                                  //> cs152  : List[List[Double]] = List(List(93.0, 89.0, 90.0), List(75.0, 76.0,
                                                  //|  68.0), List(88.0, 82.0, 78.0))
  //1.
	def avg(scores: List[Double]): Double = scores.reduce(_ + _)/scores.length
                                                  //> avg: (scores: List[Double])Double
	
	def avgAvg(scores: List[List[Double]]): List[Double] = {
	var result = List()
	for(list <- scores){ result:+avg(list) }
	result
	}                                         //> avgAvg: (scores: List[List[Double]])List[Double]
	
	def passing(scores: List[List[Double]]) : List[Int] = {
	val avgScores = avgAvg(scores)
	var result = List()
	for(i <- 0 until avgScores.length) {
	if(avgScores(i) >= 70) result :+ i
	}
	result
	}                                         //> passing: (scores: List[List[Double]])List[Int]
	
	def sumSums(scores: List[List[Double]]): Double = scores.map(_ sum).reduce(_ + _)
                                                  //> sumSums: (scores: List[List[Double]])Double

	avg(cs152.head)                           //> res0: Double = 90.66666666666667
	avgAvg(cs152)                             //> res1: List[Double] = List()
	passing(cs152)                            //> res2: List[Int] = List()
	sumSums(cs152)                            //> res3: Double = 739.0



  
}